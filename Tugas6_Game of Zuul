// room
public class Room
{
    private String description;
    private Room northExit;
    private Room southExit;
    private Room eastExit;
    private Room westExit;
    private Room upExit;
    private Room downExit;

    public Room(String description) 
    {
        this.description = description;
    }

    public void setExits(Room north, Room east, Room south, Room west, Room up, Room down) 
    {
        northExit = north;
        eastExit = east;
        southExit = south;
        westExit = west;
        upExit = up;
        downExit = down;
    }

    public String getDescription() 
    {
        return description;
    }

    public Room getExit(String direction) 
    {
        switch (direction) 
        {
            case "north": return northExit;
            case "east": return eastExit;
            case "south": return southExit;
            case "west": return westExit;
            case "up": return upExit;
            case "down": return downExit;
            default: return null;
        }
    }
}

//Parser
import java.util.Scanner;

public class Parser 
{
    private Scanner reader;

    public Parser() 
    {
        reader = new Scanner(System.in);
    }

    public Command getCommand() 
    {
        System.out.print("> ");
        String inputLine = reader.nextLine();
        String[] words = inputLine.split(" ");
        String word1 = words[0];
        String word2 = (words.length > 1) ? words[1] : null;
        return new Command(word1, word2);
    }
}

// Command
public class Command 
{
    private String commandWord;
    private String secondWord;

    public Command(String firstWord, String secondWord)
    {
        commandWord = firstWord;
        this.secondWord = secondWord;
    }

    public String getCommandWord() 
    {
        return commandWord;
    }

    public String getSecondWord() 
    {
        return secondWord;
    }

    public boolean hasSecondWord() 
    {
        return (secondWord != null);
    }
}

// Game
public class Game 
{
    private Room currentRoom;
    private Parser parser;

    public Game() 
    {
        createRooms();
        parser = new Parser();
        printWelcome();
        play();
    }

    private void createRooms() 
    {
        Room outside, theater, pub, lab, office, cellar, roof;

        // Create the rooms
        outside = new Room("outside the main entrance of the university");
        theater = new Room("in a lecture theater");
        pub = new Room("in the campus pub");
        lab = new Room("in a computing lab");
        office = new Room("in the computing admin office");
        cellar = new Room("in the cellar");
        roof = new Room("on the roof of the building");

        // Initialize room exits
        outside.setExits(null, theater, lab, pub, roof, cellar);
        theater.setExits(null, null, null, outside, null, null);
        pub.setExits(null, outside, null, null, null, null);
        lab.setExits(outside, office, null, null, null, null);
        office.setExits(null, null, null, lab, null, null);
        cellar.setExits(null, null, outside, null, null, null);
        roof.setExits(null, null, null, null, null, outside);

        currentRoom = outside;  // Start game outside
    }

    private void printWelcome() 
    {
        System.out.println();
        System.out.println("Welcome to the World of Zuul!");
        System.out.println("Zuul is a new, incredibly boring adventure game.");
        System.out.println("Type ‘help’ if you need help.");
        System.out.println();
        printLocationInfo();
    }

    private void printLocationInfo() 
    {
        System.out.println("You are " + currentRoom.getDescription());
        System.out.print("Exits: ");
        if(currentRoom.getExit("north") != null) {
            System.out.print("north ");
        }
        if(currentRoom.getExit("east") != null) {
            System.out.print("east ");
        }
        if(currentRoom.getExit("south") != null) {
            System.out.print("south ");
        }
        if(currentRoom.getExit("west") != null) {
            System.out.print("west ");
        }
        if(currentRoom.getExit("up") != null) {
            System.out.print("up ");
        }
        if(currentRoom.getExit("down") != null) {
            System.out.print("down ");
        }
        System.out.println();
    }

    private void play() 
    {
        boolean finished = false;
        while (!finished) 
        {
            Command command = parser.getCommand();
            finished = processCommand(command);
        }
        System.out.println("Thank you for playing. Goodbye!");
    }

    private boolean processCommand(Command command) 
    {
        String commandWord = command.getCommandWord();
        if (commandWord.equals("go")) 
        {
            goRoom(command);
        } 
        else if (commandWord.equals("quit")) 
        {
            return true;
        } 
        else 
        {
            System.out.println("I don't know what you mean...");
        }
        return false;
    }

    private void goRoom(Command command) 
    {
        if (!command.hasSecondWord()) 
        {
            System.out.println("Go where?");
            return;
        }

        String direction = command.getSecondWord();
        Room nextRoom = currentRoom.getExit(direction);

        if (nextRoom == null) 
        {
            System.out.println("There is no door!");
        } 
        else 
        {
            currentRoom = nextRoom;
            printLocationInfo();
        }
    }
}

